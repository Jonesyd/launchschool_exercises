# Summary
# Problem (write down implicity and explicity)
# Example / Test Data
#   Focus on Input
#   Emptiness
#   Boundaries
#   Repitition
#   Upercase Lowercase
#   Different Data Structures
# Data Structure (String, Array, Hash, Integer, Compound)
#   Input
#   Rules
#   Output
# Algorithm
#   In the language of the data Structure
#   Assess against the examples
# Abstration
#   Break down problem
#   Built in abstractions
#   Solve in one or two sentences
#   Methods
# Code: Last Step

##############################################

PEDAC
1) Understand the Problem
2) Examples / Test Cases
3) Data Structure and Algorithms
4) Code

Understand the Problem
  - take notes explicit and implicit requirements
    - inputs / outputs / rules
  - model the problem (describe processes using computational words)
  - identifying and defining important terms and concepts
  - ask questions to verify your understanding!

Examples / Test Cases
  - Two goals of examples:
    1. Understand the problem
    2. Verify that the solution is complete (finished)
  - Input / Output (to screen or return values)
  - happy paths
    - combination of requirements; the "obvious" result
  - Edge cases
    - focus on input
    - emptiness (nil/null, "", [], {})
    - boundary conditions (test cases on boundaries)
    - repetition / duplication
    - upper case / lower case
    - different data types
  - Failures / Bad Input
    - raise exceptions / report errors
    - return a special value (nil/null, 0, "", [] etc)
  - ask questions to verify your understanding!

Data Structure
  - input data
  - rules/requirements as data
    - hash / object

  - string, array, hash/object, number
    - string
      - concact, strip, reverse, etc
      - Regular Expression! split, replace, match...
    - array
      - need to walk through it (iteration)
      - index
      - abstractions!!
        - map
        - reduce
        - select/filter
        - all
        - ...
    - hash/object
      - lookup table / dictionary
      - partition data for more efficient access downstream
      - digest
    - number
      - math operations
      - number as string may have advantage over numbers

  - compound data structures
    - array of arrays
    - hash with array/object values, etc

Algorithm
  - Algorithms have to be described in the language of chosen data structure!
  - Have to be really fluent with
    - String / Regex
    - Array
      - Ruby: Enumerable
      - JavaScript: Higher Order Functions
    - Hash / Object
      - Creation (default values)
      - Access (default values)
      - Iteration
  - verify your algorithm with your examples / test cases

Abstraction
  - Rely on language built in abstractions: String/Regex, Array, Hash/Object
  - Break problems into smaller problems
  - Try to solve a problem in 1-2 sentences!!!
  - create helper methods/functions

Interview Tips
  - Communicative
  - Getting to a working solution >> no solution
  - De-risking
    - Check your building blocks
      - run code often
      - debug locally
  - Manage your energy
